{\rtf1\ansi\ansicpg936\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //
\f1 \'bf\'ec\'b6\'c1\'c4\'a3\'b0\'e5
\f0 2
\f1 \'a3\'ba\'bd\'cf\'c2\'fd\'a3\'ac\'b5\'ab\'d3\'d0
\f0 next()\
\
import java.io.*;\
import java.math.*;\
import java.util.*;\
\
public class Main \{\
\
	public static void main(String[] args) \{\
		InputStream inputStream = System.in;// new FileInputStream("C:\\\\Users\\\\wavator\\\\Downloads\\\\test.in");\
		OutputStream outputStream = System.out;\
		InputReader in = new InputReader(inputStream);\
		PrintWriter out = new PrintWriter(outputStream);\
		Task solver = new Task();\
		solver.solve(in, out);\
		out.close();\
	\}\
\
	static class Task \{\
\
		public void solve(InputReader in, PrintWriter out) \{\
			\
			\
			\
			\
		\}\
	\}\
\
	\
	\
\
\
\
	static class InputReader \{\
		public BufferedReader reader;\
		public StringTokenizer tokenizer;\
\
		public InputReader(InputStream stream) \{\
			reader = new BufferedReader(new InputStreamReader(stream), 32768);\
			tokenizer = null;\
		\}\
\
		public String next() \{\
			while (tokenizer == null || !tokenizer.hasMoreTokens()) \{\
				try \{\
					tokenizer = new StringTokenizer(reader.readLine());\
				\} catch (IOException e) \{\
					throw new RuntimeException(e);\
				\}\
			\}\
			return tokenizer.nextToken();\
		\}\
\
		public int nextInt() \{\
			return Integer.parseInt(next());\
		\}\
\
		public long nextLong() \{\
			return Long.parseLong(next());\
		\}\
\
		public double nextDouble() \{\
			return Double.parseDouble(next());\
		\}\
\
		public char[] nextCharArray() \{\
			return next().toCharArray();\
		\}\
\
//         public boolean hasNext() \{\
//             try \{\
//                 return reader.ready();\
//             \} catch(IOException e) \{\
//                 throw new RuntimeException(e);\
//             \}\
//         \}\
		public boolean hasNext() \{\
			try \{\
				String string = reader.readLine();\
				if (string == null) \{\
					return false;\
				\}\
				tokenizer = new StringTokenizer(string);\
				return tokenizer.hasMoreTokens();\
			\} catch (IOException e) \{\
				return false;\
			\}\
		\}\
\
		public BigInteger nextBigInteger() \{\
			return new BigInteger(next());\
		\}\
\
		public BigDecimal nextBigDecinal() \{\
			return new BigDecimal(next());\
		\}\
	\}\
\}}